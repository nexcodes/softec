generator client {
  provider = "prisma-client-js"
  // output   = "/node_modules/@prisma/client/default"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//roles
enum Role {
  USER
  ADMIN
  LAWYER
}

// Schema generated by better auth
model User {
  id            String   @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  role     Role      @default(USER)
  sessions Session[]
  accounts Account[]
  lawyer   Lawyer?
  crime    Crime[]
  comment  Comment[]
  vote     Vote[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  role      Role     @default(USER)
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Lawyer {
  id             String   @id @default(cuid())
  legalName      String
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization String?
  experience     Int
  description    String
  licenseNo      String   @unique
  fatherName     String
  cnic           String   @unique
  isVerified     Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([specialization])
  @@index([isVerified])
  @@map("lawyer")
}

model Crime {
  id           String   @id @default(cuid())
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String
  description  String
  location     String
  latitude     String
  longitude    String
  reportedAt   DateTime @default(now())
  crimeType    String
  incidentDate DateTime
  isLive       Boolean
  isVerified   Boolean? @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  media    Media[]
  comments Comment[]
  votes    Vote[]

  @@index([isVerified])
  @@index([isLive])
  @@map("crime")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  crimeId   String
  crime     Crime    @relation(fields: [crimeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("comment")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  crimeId   String
  value     Boolean
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  crime     Crime    @relation(fields: [crimeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, crimeId]) // prevent double voting
  @@map("vote")
}

model Media {
  id         String    @id @default(cuid())
  url        String // URL to the image or video
  type       MediaType // ENUM: IMAGE or VIDEO
  crimeId    String
  crime      Crime     @relation(fields: [crimeId], references: [id], onDelete: Cascade)
  uploadedAt DateTime  @default(now())

  @@map("media")
}

enum MediaType {
  IMAGE
  VIDEO
}
